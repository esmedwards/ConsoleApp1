# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  Default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  CERT_THUMBPRINT: '3b7b512bc32e8b50265d40659e1218902e8a1cc1'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# - task: CopyFiles@2
#   displayName: "Stage Exe"
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     Contents: '**\Release\**\ConsoleApp1.exe'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'
#     flattenFolders: true

# - task: PublishBuildArtifacts@1
#   displayName: "Publish Unsigned Exe"
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)\ConsoleApp1.exe'
#     ArtifactName: 'Unsigned Exe'
#     publishLocation: 'Container'

# - template: sign_publish_verify_signtool.yml
#   parameters:
#     smClientCertPassword: lv9Z9souHUrQ
#     smClientCertFile: "/home/esmerald/Downloads/ssm/Certificate_pkcs12.p12 "
#     smHost: https://clientauth.demo.one.digicert.com
#     smApiKey: 01c3f4989abb7445aa2b065b58_7dc6b2114c09225084ca74b16e12bda6aea3176f5398baea92cf25ffecfc1926
#     pkcs11Config: "/home/esmerald/Downloads/ssm/pkcs11properties.cfg"
#     keypairName: "azure-keypair-$(Build.BuildId)"
#     fileLocation: "ConsoleApp1.exe"
#     certThumbprint: $(CERT_THUMBPRINT)

- task: CmdLine@2 
  displayName: 'Read user variables'
  inputs:
    # targetType: 'inline'
  # env:
  #   API_KEY: $env:+$(build.QueuedBy).replace(" ","")-password
  #   API_KEY_TEST: $(ESMERALDALIAJ-PASSWORD)
    script: |
      echo $(ESMERALDALIAJ-PASSWORD)
      echo ${{ "$(build.QueuedBy)".replace(" ","")-password }}
